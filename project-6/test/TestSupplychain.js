// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require("SupplyChain");
const utils = require("web3-utils");

contract("SupplyChain", function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1;
  var upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = "John Doe";
  const originFarmInformation = "Yarray Valley";
  const originFarmLatitude = "-38.239770";
  const originFarmLongitude = "144.341490";
  var productID = sku + upc;
  const productNotes = "Best beans for Espresso";
  const productPrice = web3.toWei(1, "ether");
  var itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const emptyAddress = "0x00000000000000000000000000000000000000";

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log("ganache-cli accounts used here...");
  console.log("Contract Owner: accounts[0] ", accounts[0]);
  console.log("Farmer: accounts[1] ", originFarmerID);
  console.log("Distributor: accounts[2] ", retailerID);
  console.log("Retailer: accounts[3] ", retailerID);
  console.log("Consumer: accounts[4] ", accounts[4]);

  // 1st Test
  it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Harvested()
    var event = supplyChain.Harvested();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes,
    );

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, "Error: Invalid item SKU");
    assert.equal(resultBufferOne[1], upc, "Error: Invalid item UPC");
    assert.equal(resultBufferOne[2], originFarmerID,"Error: Missing or Invalid ownerID");
    assert.equal(resultBufferOne[3],originFarmerID,"Error: Missing or Invalid originFarmerID");
    assert.equal(resultBufferOne[4],originFarmName,"Error: Missing or Invalid originFarmName");
    assert.equal(resultBufferOne[5],originFarmInformation,"Error: Missing or Invalid originFarmInformation");
    assert.equal(resultBufferOne[6],originFarmLatitude,"Error: Missing or Invalid originFarmLatitude");
    assert.equal(resultBufferOne[7],originFarmLongitude,"Error: Missing or Invalid originFarmLongitude");
    assert.equal(resultBufferTwo[5], 0, "Error: Invalid item State");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 2nd Test
  it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Processed()
    var event = supplyChain.Processed();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc);

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferTwo[5], 1, "Error: Invalid state");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 3rd Test
  it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Packed()
    var event = supplyChain.Packed();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc);

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferTwo[5], 2, "Error: Invalid state");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 4th Test
  it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event ForSale()
    var event = supplyChain.ForSale();
    await event.watch((err, res) => {
      eventEmitted = true;
    });

    // Mark an item as ForSale by calling function sellItem()
    await supplyChain.sellItem(upc, 10);

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferTwo[4], 10, "Error: Invalid price");
    assert.equal(itemBufferTwo[5], 3, "Error: Invalid state");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 5th Test
  it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Sold()
    var event = supplyChain.Sold();
    await event.watch((err, res) => {
        eventEmitted = true;
      });

    supplyChain.addDistributor(distributorID);

    // Mark an item as Sold by calling function buyItem()
    const balanceOfUserBeforeTransaction = await web3.eth.getBalance(distributorID);
    await supplyChain.buyItem(upc, { from: distributorID, value: 15, gasPrice:0 });
    const balanceOfUserAfterTransaction = await web3.eth.getBalance(distributorID);

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferOne[2], distributorID, "Error: Invalid ownerID");
    assert.equal(itemBufferTwo[5], 4, "Error: Invalid state");
    assert.equal(itemBufferTwo[6], distributorID, "Error: Invalid distributorID");
    assert.equal(eventEmitted, true, "Invalid event emitted");
    assert.equal(balanceOfUserAfterTransaction.add(10).toString(), balanceOfUserBeforeTransaction.toString(), "Invalid balance");
  });

  // 6th Test
  it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Shipped()
    var event = supplyChain.Shipped();
    await event.watch((err, res) => {
        eventEmitted = true;
      });

    await supplyChain.shipItem(upc, { from: distributorID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferTwo[5], 5, "Error: Invalid state");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 7th Test
  it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Received()
    var event = supplyChain.Received();
    await event.watch((err, res) => {
        eventEmitted = true;
      });

    supplyChain.addRetailer(retailerID);

    await supplyChain.receiveItem(upc, { from: retailerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferOne[2], retailerID, "Error: Invalid ownerID");
    assert.equal(itemBufferTwo[5], 6, "Error: Invalid state");
    assert.equal(itemBufferTwo[7], retailerID, "Error: Invalid retailerID");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 8th Test
  it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    // Watch the emitted event Purchased()
    var event = supplyChain.Purchased();
    await event.watch((err, res) => {
        eventEmitted = true;
      });

    supplyChain.addConsumer(consumerID);

    await supplyChain.purchaseItem(upc, { from: consumerID });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const itemBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const itemBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(itemBufferOne[2], consumerID, "Error: Invalid OwnerID");
    assert.equal(itemBufferTwo[5], 7, "Error: Invalid state");
    assert.equal(itemBufferTwo[8], consumerID, "Error: Invalid ConsumerID");
    assert.equal(eventEmitted, true, "Invalid event emitted");
  });

  // 9th Test
  it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const [_sku, _upc, owner, farmer, farmName, farmInfo, farmLatitude, farmLongitude] = await supplyChain.fetchItemBufferOne.call(upc, { from: accounts[5]});
    
    // Verify the result set:
    assert.equal(_sku, 1, "Error; Invalid sku");
    assert.equal(_upc, 1, "Error; Invalid upc");
    assert.equal(owner, consumerID, "Error; Invalid owner");
    assert.equal(farmer, originFarmerID, "Error; Invalid farmer");
    assert.equal(farmName, originFarmName, "Error; Invalid farm name");
    assert.equal(farmInfo, originFarmInformation, "Error; Invalid farm info");
    assert.equal(farmLatitude, originFarmLatitude, "Error; Invalid farm latitude");
    assert.equal(farmLongitude, originFarmLongitude, "Error; Invalid farm longitude");
  });

  // 10th Test
  it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
    const supplyChain = await SupplyChain.deployed();

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const [_upc, _sku, productId, _productNotes, productPrice, itemState, distributor, retailer, consumer ] = await supplyChain.fetchItemBufferTwo.call(upc, { from: accounts[5]});

    // Verify the result set:
    assert.equal(_sku, 1, "Error; Invalid sku");
    assert.equal(_upc, 1, "Error; Invalid upc");
    assert.equal(productId, 2, "Error; Invalid product id");
    assert.equal(productNotes, _productNotes, "Error; Invalid product notes");
    assert.equal(productPrice, 10, "Error; Invalid product price");
    assert.equal(itemState, 7, "Error; Invalid item state");
    assert.equal(distributor, distributorID, "Error; Invalid distributor");
    assert.equal(retailer, retailerID, "Error; Invalid retailer");
    assert.equal(consumer, consumerID, "Error; Invalid consumer");

  });
});
